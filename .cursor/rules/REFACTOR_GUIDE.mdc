## Cursor Rules for this Repository (derived from REFACTOR_GUIDE.md)

These rules are the authoritative editing guidelines for this repo. They codify the style, structure, and architectural policies across `Config` and `BehaviorClassifier` packages. All automated edits must comply.

### Core Principles
- **Single Source of Truth (SSOT)**: All config values must come from `Config` modules. Never duplicate or hardcode experiment paths, schema, thresholds, or colors elsewhere.
- **Fail fast, fail clear**: Raise descriptive errors for invalid/missing config or inputs. No silent defaults.
- **Readable before clever**: Prefer clarity and maintainability over brevity or over-optimization.
- **Tabs-only indentation**: Use tabs for indentation across all files. Do not mix with spaces.
- **No side-effects in Config**: Config defines values and helpers only; it never touches the filesystem.

### File Organization with Cells
- Modules are organized notebook-style using `#%%` cell markers.
- Mandatory cells:
  - `CELL 00 — HEADER & OVERVIEW`: single module docstring with file path, repo/commit/timestamp, overview, and canonical tree if relevant.
  - `CELL 01 — IMPORTS`: consolidated imports.
  - `CELL 04 — PUBLIC API`: single immutable public bundle (second-to-last cell).
  - `CELL 05 — REPORT` (optional): must be the final cell and only consume the public bundle.
- Flexible cells:
  - `CELL 02 — CONSTANTS / POLICIES`
  - `CELL 03 — HELPERS / CORE LOGIC`
- Rules:
  - Only Cell 00 contains the module docstring.
  - Every later cell starts with a short banner docstring (triple-quoted) describing the section.
  - `from __future__ import annotations` must appear immediately after the module docstring and before any other imports (in Cell 01).
  - If a REPORT exists, it is always the final cell.

### Imports
- Consolidate imports in Cell 01.
- Order: standard library → typing → third-party → local.
- Remove unused imports. Lint must be clean.

### Titles, Spacing, Comments
- Section titles are ALL CAPS using `# TITLE` (no ASCII art, no `===`).
- Spacing:
  - 2 blank lines between cells.
  - 2 blank lines before/after titles.
  - 1 blank line inside sections.
- Inline comments must add domain intent; never restate code.

### Constants & Policies
- Constants are ALL_CAPS with descriptive inline comments stating domain role (not vague purpose).
- Group related constants under titled sections.
- Never duplicate values from `Config`.
- Validate policies at import time; raise on invalid states (e.g., duplicate suffixes).

### Helpers
- Private helpers are prefixed with `_`.
- Stateless and policy-light; raise on invalid inputs (no silent fallbacks).
- Place cross-cell helpers in the HELPERS cell; otherwise define locally where used.

### Functions & Docstrings
- Type hints are required.
- Use Google-style docstrings with `Args`, `Returns`, `Raises`, and `Notes` where rationale matters (e.g., half-open intervals, NaNs).

### Public API Contract
- Each module must expose exactly one immutable bundle, wrapped with `MappingProxyType`.
- `__all__` lists only that bundle.
- No stray globals and no legacy aliases.
- Do not mutate public bundles after definition.

### Report Cells
- Optional, always the final cell.
- Only consume the module’s public bundle; print human-readable summaries.
- No computation, QC checks, or writes in REPORT cells.

### Error Handling
- Default: raise descriptive errors.
- Allowed suppression: non-critical I/O only; must include the comment:
	except Exception:
		# best-effort; never break session
		pass
- Never suppress in `Config` or core helpers.

### Formatting & Lint
- Tabs-only indentation; max line length ≤ 100 characters.
- Double quotes for all strings.
- Descriptive identifiers; avoid unexplained abbreviations.
- Use half-open intervals `[start, end)` for frame ranges.
- Prefer NumPy/Pandas vectorization; allow loops only if vectorization harms readability and document rationale.
- Ruff and mypy must pass clean; remove unused code paths.

### Anti-Patterns (Strict NOs)
- Duplicating config values outside `Config`.
- Silent fallback defaults in helpers.
- Legacy aliases or multiple public bundles.
- Imports scattered outside Cell 01 or left unused.
- Printing outside the REPORT cell.
- Creating/resolving directories in `Config` (no `mkdir`, `touch`, `.resolve()`).
- Mixing tabs and spaces; lines > 100 chars; inconsistent quotes.
- One-letter variable names outside trivial loops.
- Second docstring before the `__future__` import.
- Swallowing exceptions without the allowed best-effort justification.
- Stripping file suffixes with fallbacks instead of fail-fast logic.
- Complex public API logic hidden in lambdas.

### Module Archetypes (reference)
- Config module skeleton:
	#%% CELL 00 — HEADER & OVERVIEW
	"""
	Config/path.py
	<repo-url> <commit-hash> <timestamp>

	Overview
		Define all experiment paths and helpers.
		No filesystem I/O. Config never creates directories.
	"""

	#%% CELL 01 — IMPORTS
	from __future__ import annotations
	from pathlib import Path
	from types import MappingProxyType

	#%% CELL 02 — CONSTANTS / POLICIES
	# FILE SUFFIXES
	TRACKED_SUFFIX = "_tracked.csv"  # tracked data
	SLEAP_SUFFIX = "_sleap.csv"      # sleap body-parts data

	#%% CELL 03 — HELPERS / CORE LOGIC
	def stem_without_suffix(path: Path) -> str:
		...

	#%% CELL 04 — PUBLIC API
	_PUBLIC = {"TRACKED_SUFFIX": TRACKED_SUFFIX}
	PATH = MappingProxyType(_PUBLIC)
	__all__ = ["PATH"]

	#%% CELL 05 — REPORT
	if __name__ == "__main__":
		print("=== PATH summary ===")
		for key in sorted(PATH):
			print(key)
- Helper module skeleton (`BehaviorClassifier/_utils.py`):
	#%% CELL 00 — HEADER & OVERVIEW
	"""
	BehaviorClassifier/_utils.py
	<repo-url> <commit-hash> <timestamp>

	Overview
		General stateless helpers used across classification.
	"""

	#%% CELL 01 — IMPORTS
	from __future__ import annotations
	from types import MappingProxyType
	import numpy as np

	#%% CELL 03 — HELPERS / CORE LOGIC
	def compute_speed_mm_per_s(...): ...

	#%% CELL 04 — PUBLIC API
	_PUBLIC = {"compute_speed_mm_per_s": compute_speed_mm_per_s}
	UTILS = MappingProxyType(_PUBLIC)
	__all__ = ["UTILS"]

	#%% CELL 05 — REPORT
	if __name__ == "__main__":
		print("=== UTILS summary ===")
		for k in sorted(UTILS):
			print(k)

### PR Checklist (enforced expectations)
- Cell 00 docstring with metadata and overview present; no second docstring elsewhere.
- `from __future__ import annotations` immediately after docstring.
- Imports consolidated and ordered; no unused imports.
- Every later cell begins with a banner docstring.
- Section titles in ALL CAPS with required spacing.
- Constants ALL_CAPS with domain-role comments; logically grouped.
- Functions type-hinted with Google-style docstrings.
- Exactly one immutable public bundle per module; `__all__` lists only that bundle.
- REPORT cell (if any) only prints summaries from the public bundle.
- Config never performs filesystem actions.
- Fail fast for invalid policies/config (e.g., duplicate suffixes, collisions).
- Tabs-only, ≤ 100 chars/line, double quotes consistent.
- No stray globals; lint and mypy must pass.
- Sanity checks present where policy could drift.

### Editing Behavior for Cursor
- When creating or modifying files, maintain the cell structure and spacing rules.
- Do not introduce spaces for indentation; preserve existing tabs.
- When adding functions, include full type hints and Google-style docstrings.
- When exposing helpers/constants, update the single public bundle and `__all__` accordingly.
- Avoid adding computation or I/O in Config and REPORT cells.
- Prefer vectorized NumPy/Pandas implementations and document when loops are chosen.

### Decision Table (routing code changes)
- Experiment-wide constants or schema → `Config` package.
- General data transforms (no policy) → `BehaviorClassifier/_utils.py`.
- Classification thresholds, smoothing, tie-breaks → `BehaviorClassifier/_classifier`.
- QC checks and error/flag reporting → `BehaviorClassifier/_qc_error_flag`.
- Orchestration/sequencing → `BehaviorClassifier/_main`.
- Colab/Drive path handling → `BehaviorClassifier/_colab`.
- Entry scripts with side-effects → `*_run.py`.
